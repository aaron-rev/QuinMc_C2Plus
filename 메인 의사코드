int main()
{
	column1:칼럼 저장할 배열 선언;
	column2:칼럼 저장할 배열 선언;
	Prime_Implicant:주항 저장할 배열 선언;
	usage:칼럼 체킹할 배열 선언
	true_minterm:TrueMinterm 저장할 배열 선언;


	파일 열기("input_minterm.txt");
	if (파일이 안열리면) {
		"false" 출력;
		프로그램 종료;
	}
	while (파일을 끝까지 읽을 때 까지)
	{
		한 줄 읽기;
		if (true minterm인 경우) {
			column1에 저장;
			true_minterm에 저장;
		}
		else if (Don't Care인 경우)
			column1에 저장;
	}
	파일 닫기;
	while (1)
	{
		if (짝수번 칼럼 일 경우)
		{
			column2에 칼럼 저장하는 함수(column2, column1, usage);
			Prime_Implicnat에 주항 판별 후 저장;
			if (칼럼이 더 이상 생성이 안될 경우) break; 
			column1 초기화;
		}
		else if(홀수번 칼럼 일 경우)
		{
			column1에 칼럼 저장하는 함수(column1, column2, usage);
			Prime_Implicnat에 주항 판별 후 저장;
			if (칼럼이 더 이상 생성이 안될 경우) break;
			column2 초기화;
		}
	}
	if (마지막 칼럼이 짝수 번 일 경우)
		Prime_Implicant에 column2 저장
	else if (마지막 칼럼이 홀수 번 일 경우)
		Prime_Implicant에 column1 저장

	EssentialPI : Essential Prime Implicant 저장할 배열 선언;
	PITable:커버 확인행을 포함한 PITable 2차원 배열 선언;

	for (PITable 마지막 행까지)
	{
		for (PITable 마지막 열까지)
			PITable 0으로 초기화;
	}
	for (PITable 마지막 행까지)
	{
		for (PITable 마지막 열까지)
		{
			int count = 0;
			for (주항 비트 수 만큼)
			{
				if (주항 각 비트 == 트루민텀 각 비트)
					count++;
				else if (주항 비트 == '-')
					count++;
			}
			if (count == 주항 비트 수)
				PITable에 1 마킹;
		}
	}
	for (트루민텀 갯수 만큼)
	{
		int PIRowIdx, PIColumnIdx;
		OneCount:각 열에 1의 갯수 카운팅 해주는 변수 선언
		for (주항 갯수 만큼)
		{
			if (PITable에 1이 마킹된 경우)
				OneCount++;
		}

		if (OneCount == 1 이고 PITable 확인행에 체크 되지 않은 경우)
		{
			EssentialPI에 해당 주항 저장;
			for (트루민텀 갯수만큼)
			{
				if (PITable 해당 열에 1이 마킹 돼있는 경우)
				{
					for (주항 갯수 만큼)
						해당 열 0으로 초기화;
					해당 열 확인행 체크;
				}
			}
		}

	}

	while (1)
	{
		if (확인행 전부 체크 됐는지 확인하는 함수(PITable, 주항 갯수, 트루민텀 갯수) == true)break;
		MaxOne:주항이 가장 많은 트루민텀 체크하는 갯수 변수 선언
		MaxIndex:MaxOne에 해당하는 열 인덱스 저장 변수 선언
		Count_1:주항이 트루민텀 체크하는 갯수 변수 선언
		for (i<주항 갯수)	//PIT확인행 체크된 열 초기화 후 남은 열 중 비교
		{
			Count_1 = 0;
			for (j<트루민텀 갯수)
			{
				if (PITable[i][j] == 1)   //1의 갯수 체크
					Count_1++;
			}
			if (Count_1 > MaxOne)		//가장 많은 1의 갯수 체크
			{
				MaxOne = Count_1;
				MaxIndex = i;
			}
		}
		for (i<트루민텀 갯수 만큼)
		{
			if (PITable[MaxIndex][i] == 1)
			{
				for (주항 갯수 만큼)
					해당 열 0으로 초기화;
				해당 열 확인행 체크;
			}
		}

		EssentialPI에 해당 주항 저장;
	}
	
writeResult : ofstream 개방
"result.txt" : 값을 출력할 파일 오픈
temp : 값들을 한꺼번에 출력하기 위한 string

for(EssentialPICount 배열에 저장된 모든 배열 요소에 대해 작용)
	temp += EssentialPI 배열 요소 + '\n'
temp += "트랜지스터 개수 출력 안내 메세지"

result.txt <<  temp에 모아놨던 값
result.txt << 트랜지스터 개수

파일 폐쇄

지금까지 동적할당 했던 메모리들 모두 해제
